#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= FALSE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType, scales="free", space= "free_x") +
theme_tufte()+
ggtitle("Replication Performance split by Trial Type")
ggplot(data=Rep2007Agg1, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= TRUE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType, scales="free", space= "free_x") +
theme_tufte()+
ggtitle("Replication Performance split by Trial Type")
Rep2007Agg3.1 <- aggregate(RespCorr ~ Condition + TrialType2 + Block + ParticipantID , data=ReplicationData2007, mean, na.rm= FALSE)
Rep2007Agg3.1$Block <- factor(Rep2007Agg3.1$Block)
ggplot(data=Rep2007Agg3.1, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= FALSE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType2, scales="free", space= "free_x") +
theme_tufte() +
ggtitle("Replication Performance split by Trial Type")
Rep2007Agg3.1 <- aggregate(RespCorr ~ Condition + TrialType2 + Block + ParticipantID , data=ReplicationData2007, mean, na.rm= FALSE)
Rep2007Agg3.1$Block <- factor(Rep2007Agg3.1$Block)
ggplot(data=Rep2007Agg3.1, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= TRUE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType2, scales="free", space= "free_x") +
theme_tufte() +
ggtitle("Replication Performance split by Trial Type")
library(data.table)
library(tidyverse)
library(ggthemes)
library(outliers)
library(lme4)
library(lmerTest)
library(afex)
library(kableExtra)
# Our data is in two formats because of a change in jsPsych version halfway through our data collection - thus we read those separate data file types (distinguishable by file size) in here separately, then combine them into a single large data frame
setwd("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/50s/")
files50  <- list.files(pattern = '\\.csv')
tables50 <- lapply(files50, read.csv, header = TRUE)
combined.df.50 <- do.call(rbind , tables50)
combined.df.50[] <- lapply(combined.df.50, function(x) gsub("\\\\", "", x))
setwd("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/40s/")
files40  <- list.files(pattern = '\\.csv')
tables40 <- lapply(files40, read.csv, header = TRUE)
combined.df.40 <- do.call(rbind , tables40)
colnames(combined.df.50)<- c("rtD", "key_press", "trialtype2", "TrialIndex", "elapsed", "node_id", "viewhist", "responses", "Yoking", "RT", "RespKey", "RespCorr", "TrialType", "Image", "Label", "Location", "CorrectResponse", "Block", "BlockTrial", "Condition", "LabelType", "Subcondition", "TrialNum")
colnames(combined.df.40)<- c("rtD", "key_press", "trialtype2", "TrialIndex", "elapsed", "node_id", "viewhist", "responses", "Yoking", "RT", "RespKey", "RespCorr", "TrialType", "Image", "Label", "Location", "CorrectResponse", "Block", "BlockTrial", "Condition", "LabelType", "Subcondition", "TrialNum")
combined.df <- rbind(combined.df.50, combined.df.40)
#1- Substitute out some special characters
combined.df[] <- lapply(combined.df, function(x) gsub("\\\\", "", x))
combined.df[] <- lapply(combined.df, function(x) gsub("[{}]", "", x))
combined.df[] <- lapply(combined.df, function(x) gsub("\"", "", x))
#2- Add in a column with the biographical data (which is currently stored in a single value on the fourth line of each participant's file)
biodata <- combined.df[seq(4, nrow(combined.df), 246),]
biodata <- as.data.frame(biodata$responses)
colnames(biodata) <- "biodata"
biodata <- separate(biodata, col=biodata, into = c("Age", "Gender", "Specify"), sep = ",")
biodata$Age <- sub("age:", "", biodata$Age)
biodata$Gender <- sub("gender:", "", biodata$Gender)
biodata$Specify <- sub("specify:", "", biodata$Specify)
combined.df$Age <- rep(biodata$Age, each = 246)
combined.df$Gender <- rep(biodata$Gender, each = 246)
#3- Add a unique participantID (actually the name of each file)
files <- c(files40, files50)
files <- sub(".csv", "", files)
combined.df$ParticipantID <- rep(files, each= 246)
#4- Clean up our Data, Get rid of some useless columns, and re-sort the remaining columns into ones we will actually use
CleanData <- subset(combined.df, select = c("ParticipantID", "Condition", "Subcondition", "Yoking", "TrialNum", "TrialType", "Block", "BlockTrial", "Image", "Label", "Location", "CorrectResponse", "RespKey", "RespCorr", "RT"))
#5- Get rid of extra lines from the jsPsych output- leaving us with only our Trial data (everything else of use we've extracted and added as columns)
CleanData <- subset(CleanData, TrialNum > 0)
#6- Set the data types of our various columns
CleanData$ParticipantID <- as.factor(CleanData$ParticipantID)
CleanData$Condition <- as.factor(CleanData$Condition)
CleanData$Subcondition <- as.factor(CleanData$Subcondition)
CleanData$Yoking <- as.factor(CleanData$Yoking)
CleanData$TrialType <- as.factor(CleanData$TrialType)
CleanData$Location <- as.factor(CleanData$Location)
CleanData$TrialNum <- as.numeric(CleanData$TrialNum)
CleanData$Block <- as.numeric(CleanData$Block)
CleanData$BlockTrial <- as.numeric(CleanData$BlockTrial)
CleanData$RespCorr <- as.numeric(CleanData$RespCorr)
CleanData$RT <- as.numeric(CleanData$RT)
#1- Removing participant 7gtriiTixvBaQ
RespCorrStrange <- CleanData[is.na(CleanData$RespCorr),]
CleanData.RespCorr <- subset(CleanData, ParticipantID != "7gtriiTixvBaQ")
#2A- Removing Participants with impossible negative RT values
RTNegative <- subset(CleanData.RespCorr, RT < 0)
CleanData.RTNegCorr <- subset(CleanData.RespCorr, ParticipantID != "60CBPiTiO1gKw")
CleanData.RTNegCorr <- subset(CleanData.RTNegCorr, ParticipantID != "k3LHwiTiOx7fx")
# Verify that we have removed all negative values RT values from the data frame
RTNegative2 <- subset(CleanData.RTNegCorr, RT < 0)
#2B- Removing Participants with very large single RT values
RTHigh <- subset(CleanData.RespCorr, RT>120000 )
#Relevel this to get rid of factor levels that aren't there any longer
RTHigh$ParticipantID <- factor(RTHigh$ParticipantID)
RTHighs <- as.data.frame(table(RTHigh$ParticipantID))
colnames(RTHighs) <- c("Participant", "Count")
#re-order by count
RTHighs <- RTHighs[order(-RTHighs$Count),]
#Give shorter participantIDs
RTHighs$Participant <- substring(RTHighs$Participant, 1,3)
#Making the Participant Column into an Index
RTHighs2 <- RTHighs[-1]
row.names(RTHighs2) <- RTHighs$Participant
#Transpose for output
RTHighsT <- as.data.frame(t(RTHighs2))
knitr::kable(RTHighsT, caption = 'Number of Trials over 2 Minutes long by ParticipantID') %>%
kable_styling() %>%
scroll_box(width = "800px", height = "150px")
#Get the participantIDs for participants with too-long RT values
participants <- unique(RTHigh$Participant)
#Write a for loop that removes all the lines of the data frame for each of these participants
CleanData.HighRTCorr <- CleanData.RTNegCorr
for (participant in participants) {
CleanData.HighRTCorr <- subset(CleanData.HighRTCorr, ParticipantID != participant)
}
CleanData2 <- CleanData.HighRTCorr
#Output this clean Data to acsv
write.csv(CleanData2, file=("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/CleanData.csv"))
ggplot(CleanData2, aes(RT)) +
geom_density() #+
#xlim(0, 40000)
#Calculating the interquartile range
lowerquart <- quantile(CleanData2$RT)[2]
upperquart <- quantile(CleanData2$RT)[4]
Interquartile <- upperquart - lowerquart
#Calculating thresholds
#Mild thresholds are 1.5* interquartile range
mild.low <- lowerquart - (Interquartile * 1.5)
mild.high <- upperquart + (Interquartile * 1.5)
#Extremes are 3* interquartile range
extreme.low <- lowerquart - (Interquartile * 3)
extreme.high <- upperquart + (Interquartile * 3)
#1- Removing all Outliers ()
CleanData.RTTrim1 <- subset(CleanData2, RT > mild.low & RT < mild.high)
ggplot(CleanData.RTTrim1, aes(RT)) +
geom_density() +
ggtitle("Density Plot of RTs- All Outliers Removed")
#2- Replacing all Outliers with the Mean
CleanData.RTTrim2 <- CleanData2
#Compute non-outlier means
NOMean1 <- mean(CleanData.RTTrim1$RT)
CleanData.RTTrim2$RT <- ifelse(CleanData.RTTrim2$RT < mild.low,
NOMean1,
CleanData.RTTrim2$RT)
CleanData.RTTrim2$RT <- ifelse(CleanData.RTTrim2$RT > mild.high,
NOMean1,
CleanData.RTTrim2$RT)
ggplot(CleanData.RTTrim2, aes(RT)) +
geom_density() +
ggtitle("Density Plot of RTs- All Outliers Replaced with Mean")
#3- Removing only extreme outliers
CleanData.RTTrim3 <- subset(CleanData2, RT > extreme.low & RT < extreme.high)
ggplot(CleanData.RTTrim3, aes(RT)) +
geom_density() +
ggtitle("Density Plot of RTs- Extreme Outliers Removed")
#4- Setting outliers to the most extreme of the minimum outlier values
CleanData.RTTrim4 <- CleanData2
CleanData.RTTrim4$RT <- ifelse(CleanData.RTTrim4$RT < mild.low,
mild.low,
CleanData.RTTrim4$RT)
CleanData.RTTrim4$RT <- ifelse(CleanData.RTTrim4$RT > mild.high,
mild.high,
CleanData.RTTrim4$RT)
ggplot(CleanData.RTTrim4, aes(RT)) +
geom_density() +
ggtitle("Density Plot of RTs- Outliers Trimmed to Mild Outlier Boundary")
#5- Replacing all outliers with the mean on a by-subject basis
participantIDs <- unique(CleanData2$ParticipantID)
participantdata <- list()
CleanData.RTTrim5 <- list()
for (participant in participantIDs) {
participantdata <- subset(CleanData2, ParticipantID == participant)
#Get Non-Outlier Mean
participantdataNO <- subset(participantdata, RT > mild.low & RT < mild.high)
NOMean2 <- mean(participantdataNO$RT)
participantdata$RT <- ifelse(participantdata$RT < mild.low,
NOMean2,
participantdata$RT)
participantdata$RT <- ifelse(participantdata$RT > mild.high,
NOMean2,
participantdata$RT)
CleanData.RTTrim5 <- rbind(CleanData.RTTrim5, participantdata)
}
ggplot(CleanData.RTTrim5, aes(RT)) +
geom_density() +
ggtitle("Density Plot of RTs- Outliers Replaced with Mean (By Subject)")
CleanData3 <- CleanData.RTTrim5
#Splitting Testing Trials
participantIDs <- unique(CleanData3$ParticipantID)
participantdata <- list()
participantdata.training <- list()
participantdata.testing <- list()
testingtrials <- list()
trainingtrials <- list()
for (participant in participantIDs) {
participantdata <- subset(CleanData3, ParticipantID == participant)
participantdata.training <- subset(participantdata, TrialType == "Training")
participantdata.testing <- subset(participantdata, TrialType == "Testing")
TrainingFigures <- unique(participantdata.training$Image)
participantdata.training$Generalisation <- NA
participantdata.testing$Generalisation <- ifelse(
participantdata.testing$Image %in% TrainingFigures,
"Old",
"New")
trainingtrials <- rbind(trainingtrials, participantdata.training)
testingtrials <- rbind(testingtrials, participantdata.testing)
}
CleanData4 <- rbind(trainingtrials, testingtrials)
#Factor levels, adding Trial Type 2
CleanData4$TrialType <- factor(CleanData4$TrialType, level = c ("Training", "Testing"))
CleanData4$TrialType2 <- paste(CleanData4$TrialType, CleanData4$Generalisation, sep = "-")
CleanData4$Generalisation <- as.factor(CleanData4$Generalisation)
CleanData4$TrialType2 <- factor(CleanData4$TrialType2, level = c ("Training-NA", "Testing-Old", "Testing-New"),
labels = c("Training", "Testing-Old", "Testing-New"))
# Obtaining the curviness of images from our original script
CleanData4$Image <- sub("Stims/Figures/", "", CleanData4$Image)
CleanData4$Image <- sub(".bmp", "", CleanData4$Image)
CleanData4 <- separate(CleanData4, col=Image, into = c("ImageSeed", "JaggedvsCurved", "Curviness", "Set"), sep = "-")
#Name the levels of Condition, rather than having them be numbers
ReplicationData2007 <- subset(CleanData4, Condition == 10|Condition == "3A"|Condition == "3B")
ReplicationData2007$Condition <- factor(ReplicationData2007$Condition,
levels= c("3A", "3B", 10),
labels = c("Conventional Category","Conventional Category","No Label"))
#There are 2 subconditions here - 3A and 3B - we're going to ignore thedifference for now
Rep2007Agg1 <- aggregate(RespCorr ~ Condition + TrialType + Block , data=ReplicationData2007, mean, na.rm= FALSE)
Rep2007Agg1$Block <- factor(Rep2007Agg1$Block)
ggplot(data=Rep2007Agg1, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= FALSE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType, scales="free", space= "free_x") +
theme_tufte()+
ggtitle("Replication Performance split by Trial Type")
#Reading in Gary's Data
Lupyan2007 <- read.csv("C:/Users/Alan/Documents/GitHub/Stekic-et-al/RScripts/Lupyan2007Data.csv")
Rep2007Agg2 <- Rep2007Agg1
#Adding a "study" column to our data
Rep2007Agg2$Study <- "Stekic et al (2019)"
#Combining the 2 dataframes into 1
CombinedData <- rbind(Rep2007Agg2, Lupyan2007)
CombinedData$Group <- paste(CombinedData$Study, CombinedData$Condition)
#Plotting the Data
ggplot(data=CombinedData, aes(x=Block, y=RespCorr, group= Group)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= FALSE, aes(linetype = Condition, colour= Study)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType, scales="free", space= "free_x") +
theme_tufte()+
ggtitle("Replication Performance split by Trial Type, comparing our data to Lupyan et al. (2007)")
CleanData2 <- read.csv("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/CleanData.csv")
CleanData3 <- subset(CleanData2, Condition == "3A"|Condition == "3B"|Condition == "10")
write.csv(CleanData4, file=("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/CleanData4.csv"))
CleanData2 <- read.csv("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/CleanData4.csv")
CleanData3 <- subset(CleanData2, Condition == "3A"|Condition == "3B"|Condition == "10")
Rep2007Agg3 <- aggregate(RespCorr ~ Condition + TrialType2 + Block + ParticipantID , data=CleanData3, mean, na.rm= FALSE)
Rep2007Agg3$Block <- factor(Rep2007Agg3$Block)
ggplot(data=Rep2007Agg3, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= FALSE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType2, scales="free", space= "free_x") +
theme_tufte() +
ggtitle("Replication Performance split by Trial Type")
CleanData3$Condition <- factor(CleanData3$Condition,
levels= c("3A", "3B", 10),
labels = c("Conventional Category","Conventional Category","No Label"))
View(CleanData3)
CleanData3$TrialType2 <- factor(CleanData3$TrialType2,
levels= c("Training", "Testing-Old", "Testing-New"))
Rep2007Agg3 <- aggregate(RespCorr ~ Condition + TrialType2 + Block + ParticipantID , data=CleanData3, mean, na.rm= FALSE)
Rep2007Agg3$Block <- factor(Rep2007Agg3$Block)
ggplot(data=Rep2007Agg3, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= FALSE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType2, scales="free", space= "free_x") +
theme_tufte() +
ggtitle("Replication Performance split by Trial Type")
ggplot(data=Rep2007Agg3, aes(x=Block, y=RespCorr, group= Condition)) +
#geom_line(aes(color= Condition)) +
#geom_point(size=1.75, aes(colour = Condition)) +
geom_smooth(method='loess', formula= y ~ x, se= TRUE, aes(linetype = Condition)) +
# scale_linetype_manual(values = c("solid", "solid", "solid",
#                        "longdash", "longdash", "longdash", "dotdash",
#                        "dotted")) +
scale_color_manual(values= c("#0066CC", "#CC0033","#33FF00", "#0066CC", "#CC0033","#33FF00", "#33FF00", "#000000")) +
labs(x="Block", y="Proportion of Correct Responses") +
scale_y_continuous(limits = c(0.45,1), breaks=c(0.5,0.6,0.7,0.8,0.9,1.0)) +
facet_grid(~TrialType2, scales="free", space= "free_x") +
theme_tufte() +
ggtitle("Replication Performance split by Trial Type")
Rep2007.Model4 <- glmer(RespCorr ~ Condition * TrialType2 + Condition * Block +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
(1|ParticipantID), #Random intercept for participantID
data=CleanData3,
family= binomial)
summary(Rep2007.Model4)
Rep2007.Model4 <- glmer(RespCorr ~ Condition * TrialType2 + Condition * Block +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
(1|ParticipantID), #Random intercept for participantID
data=CleanData3,
family= binomial)
summary(Rep2007.Model4)
str(CleanData5)
Rep2007.Model4 <- glmer(RespCorr ~ Condition * TrialType2 + Condition * Block +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
(1|ParticipantID), #Random intercept for participantID
data=Rep2007,
family= binomial)
str(Rep2007)
str(CleanData3)
#Recoding "block" such that testing blocks are distinct from training blocks (currently blocks 1-4 are treated as identical statistically)
CleanData3$Block <- ifelse(CleanData3$TrialType == "Testing",
CleanData3$Block + 9,
CleanData3$Block)
#Refactoring to drop unused levels
#CleanData5$Block <- factor(CleanData5$Block)  #Not sure whether block should be numeric or a factor
CleanData3$ParticipantID <- factor(CleanData3$ParticipantID)
#Specifying a First model and looking at the results- Note this model FAILS TO CONVERGE
#Rep2007.Model1 <- glmer(RespCorr ~ Condition + TrialType2 + Block + Curviness +  #Fixed Efffects (no interactions)
#                           (1|ParticipantID), #Random intercept for participantID
#                         data=CleanData3,
#                        family= "binomial")
#summary(Rep2007.Model1)
#Specifying a more complex model THIS MODEL ALSO FAILS TO CONVERGE
#Rep2007.Model2 <- glmer(RespCorr ~ Condition * TrialType2 + Condition * Block + Curviness +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
#                          (1|ParticipantID), #Random intercept for participantID
#                       data=CleanData3,
#                      family= "binomial")
#summary(Rep2007.Model2)
#Curviness is not massively central to our replication, so lets drop it and see if we can get a model to converge NOPE IT DOESN"T CONVERGE EITHER
#Rep2007.Model3 <- glmer(RespCorr ~ Condition * TrialType2 * Block +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
#                           (1|ParticipantID), #Random intercept for participantID
#                        data=CleanData3,
#                       family= "binomial")
#summary(Rep2007.Model3)
#Lets remove our three-way interaction
#And rescale and center our dependent variable
Rep2007.Model4 <- glmer(RespCorr ~ Condition * TrialType2 + Condition * Block +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
(1|ParticipantID), #Random intercept for participantID
data=CleanData3,
family= binomial)
summary(Rep2007.Model4)
#use step to simplify model
#stepFirst <- step(ArbData.Model1)
#ArbData.Model2 <- get_model(stepFirst)
#summary(ArbData.Model2)
Rep2007.Model4 <- glmer(RespCorr ~ Condition * TrialType2 + Condition * Block +  #Fixed Efffects (wiht interactions of Condition x Trial Type and Condition x Bock)
(1|ParticipantID), #Random intercept for participantID
data=CleanData3,
family= binomial)
summary(Rep2007.Model4)
library(data.table)
library(tidyverse)
library(ggthemes)
library(outliers)
library(lme4)
library(lmerTest)
library(afex)
library(kableExtra)
# Our data is in two formats because of a change in jsPsych version halfway through our data collection - thus we read those separate data file types (distinguishable by file size) in here separately, then combine them into a single large data frame
setwd("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/50s/")
files50  <- list.files(pattern = '\\.csv')
tables50 <- lapply(files50, read.csv, header = TRUE)
combined.df.50 <- do.call(rbind , tables50)
combined.df.50[] <- lapply(combined.df.50, function(x) gsub("\\\\", "", x))
setwd("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/40s/")
files40  <- list.files(pattern = '\\.csv')
tables40 <- lapply(files40, read.csv, header = TRUE)
combined.df.40 <- do.call(rbind , tables40)
colnames(combined.df.50)<- c("rtD", "key_press", "trialtype2", "TrialIndex", "elapsed", "node_id", "viewhist", "responses", "Yoking", "RT", "RespKey", "RespCorr", "TrialType", "Image", "Label", "Location", "CorrectResponse", "Block", "BlockTrial", "Condition", "LabelType", "Subcondition", "TrialNum")
colnames(combined.df.40)<- c("rtD", "key_press", "trialtype2", "TrialIndex", "elapsed", "node_id", "viewhist", "responses", "Yoking", "RT", "RespKey", "RespCorr", "TrialType", "Image", "Label", "Location", "CorrectResponse", "Block", "BlockTrial", "Condition", "LabelType", "Subcondition", "TrialNum")
combined.df <- rbind(combined.df.50, combined.df.40)
#1- Substitute out some special characters
combined.df[] <- lapply(combined.df, function(x) gsub("\\\\", "", x))
combined.df[] <- lapply(combined.df, function(x) gsub("[{}]", "", x))
combined.df[] <- lapply(combined.df, function(x) gsub("\"", "", x))
#2- Add in a column with the biographical data (which is currently stored in a single value on the fourth line of each participant's file)
biodata <- combined.df[seq(4, nrow(combined.df), 246),]
biodata <- as.data.frame(biodata$responses)
colnames(biodata) <- "biodata"
biodata <- separate(biodata, col=biodata, into = c("Age", "Gender", "Specify"), sep = ",")
biodata$Age <- sub("age:", "", biodata$Age)
biodata$Gender <- sub("gender:", "", biodata$Gender)
biodata$Specify <- sub("specify:", "", biodata$Specify)
combined.df$Age <- rep(biodata$Age, each = 246)
combined.df$Gender <- rep(biodata$Gender, each = 246)
#3- Add a unique participantID (actually the name of each file)
files <- c(files40, files50)
files <- sub(".csv", "", files)
combined.df$ParticipantID <- rep(files, each= 246)
#4- Clean up our Data, Get rid of some useless columns, and re-sort the remaining columns into ones we will actually use
CleanData <- subset(combined.df, select = c("ParticipantID", "Condition", "Subcondition", "Yoking", "TrialNum", "TrialType", "Block", "BlockTrial", "Image", "Label", "Location", "CorrectResponse", "RespKey", "RespCorr", "RT"))
#5- Get rid of extra lines from the jsPsych output- leaving us with only our Trial data (everything else of use we've extracted and added as columns)
CleanData <- subset(CleanData, TrialNum > 0)
#6- Set the data types of our various columns
CleanData$ParticipantID <- as.factor(CleanData$ParticipantID)
CleanData$Condition <- as.factor(CleanData$Condition)
CleanData$Subcondition <- as.factor(CleanData$Subcondition)
CleanData$Yoking <- as.factor(CleanData$Yoking)
CleanData$TrialType <- as.factor(CleanData$TrialType)
CleanData$Location <- as.factor(CleanData$Location)
CleanData$TrialNum <- as.numeric(CleanData$TrialNum)
CleanData$Block <- as.numeric(CleanData$Block)
CleanData$BlockTrial <- as.numeric(CleanData$BlockTrial)
CleanData$RespCorr <- as.numeric(CleanData$RespCorr)
CleanData$RT <- as.numeric(CleanData$RT)
library(data.table)
library(tidyverse)
library(ggthemes)
library(outliers)
library(lme4)
library(lmerTest)
library(afex)
library(kableExtra)
# Our data is in two formats because of a change in jsPsych version halfway through our data collection - thus we read those separate data file types (distinguishable by file size) in here separately, then combine them into a single large data frame
setwd("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/50s/")
files50  <- list.files(pattern = '\\.csv')
tables50 <- lapply(files50, read.csv, header = TRUE)
combined.df.50 <- do.call(rbind , tables50)
combined.df.50[] <- lapply(combined.df.50, function(x) gsub("\\\\", "", x))
setwd("C:/Users/Alan/Documents/GitHub/Stekic-et-al/Data/40s/")
files40  <- list.files(pattern = '\\.csv')
tables40 <- lapply(files40, read.csv, header = TRUE)
combined.df.40 <- do.call(rbind , tables40)
colnames(combined.df.50)<- c("rtD", "key_press", "trialtype2", "TrialIndex", "elapsed", "node_id", "viewhist", "responses", "Yoking", "RT", "RespKey", "RespCorr", "TrialType", "Image", "Label", "Location", "CorrectResponse", "Block", "BlockTrial", "Condition", "LabelType", "Subcondition", "TrialNum")
colnames(combined.df.40)<- c("rtD", "key_press", "trialtype2", "TrialIndex", "elapsed", "node_id", "viewhist", "responses", "Yoking", "RT", "RespKey", "RespCorr", "TrialType", "Image", "Label", "Location", "CorrectResponse", "Block", "BlockTrial", "Condition", "LabelType", "Subcondition", "TrialNum")
combined.df <- rbind(combined.df.50, combined.df.40)
#1- Substitute out some special characters
combined.df[] <- lapply(combined.df, function(x) gsub("\\\\", "", x))
combined.df[] <- lapply(combined.df, function(x) gsub("[{}]", "", x))
combined.df[] <- lapply(combined.df, function(x) gsub("\"", "", x))
#2- Add in a column with the biographical data (which is currently stored in a single value on the fourth line of each participant's file)
biodata <- combined.df[seq(4, nrow(combined.df), 246),]
biodata <- as.data.frame(biodata$responses)
colnames(biodata) <- "biodata"
biodata <- separate(biodata, col=biodata, into = c("Age", "Gender", "Specify"), sep = ",")
biodata$Age <- sub("age:", "", biodata$Age)
biodata$Gender <- sub("gender:", "", biodata$Gender)
biodata$Specify <- sub("specify:", "", biodata$Specify)
combined.df$Age <- rep(biodata$Age, each = 246)
combined.df$Gender <- rep(biodata$Gender, each = 246)
#3- Add a unique participantID (actually the name of each file)
files <- c(files40, files50)
files <- sub(".csv", "", files)
combined.df$ParticipantID <- rep(files, each= 246)
#4- Clean up our Data, Get rid of some useless columns, and re-sort the remaining columns into ones we will actually use
CleanData <- subset(combined.df, select = c("ParticipantID", "Condition", "Subcondition", "Yoking", "TrialNum", "TrialType", "Block", "BlockTrial", "Image", "Label", "Location", "CorrectResponse", "RespKey", "RespCorr", "RT"))
#5- Get rid of extra lines from the jsPsych output- leaving us with only our Trial data (everything else of use we've extracted and added as columns)
CleanData <- subset(CleanData, TrialNum > 0)
#6- Set the data types of our various columns
CleanData$ParticipantID <- as.factor(CleanData$ParticipantID)
CleanData$Condition <- as.factor(CleanData$Condition)
CleanData$Subcondition <- as.factor(CleanData$Subcondition)
CleanData$Yoking <- as.factor(CleanData$Yoking)
CleanData$TrialType <- as.factor(CleanData$TrialType)
CleanData$Location <- as.factor(CleanData$Location)
CleanData$TrialNum <- as.numeric(CleanData$TrialNum)
CleanData$Block <- as.numeric(CleanData$Block)
CleanData$BlockTrial <- as.numeric(CleanData$BlockTrial)
CleanData$RespCorr <- as.numeric(CleanData$RespCorr)
CleanData$RT <- as.numeric(CleanData$RT)
