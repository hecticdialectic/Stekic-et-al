theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Condition ~ Simulation) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
SimulatedRTData <- subset(SimulatedData, select = c(Block, SubCondition, Condition, Condition2,
Congruency, CatVsItem, RT.1, RT.2, RT.3, RT.4, RT.5, RT.6))
SimulatedCorrectnessData <- subset(SimulatedData, select = c(Block, SubCondition, Condition, Condition2,
Congruency, CatVsItem, RespCorr.1, RespCorr.2, RespCorr.3, RespCorr.4, RespCorr.5, RespCorr.6))
MeltedRTData <- melt(SimulatedRTData,
variable.name = "Reaction Time",
id.vars = c ("Block", "SubCondition", "Condition", "Condition2", "Congruency", "CatVsItem" ))
names(MeltedRTData)[7] <- "Simulation"
names(MeltedRTData)[8] <- "ReactionTime"
ggplot(MeltedRTData, aes(x= Block, y= ReactionTime, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Reaction Time Data by Condition") +
labs(x="Block", y="Reaction Time") +
coord_cartesian(ylim = c(400, 1000)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(~ Simulation, ncol = 2) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
MeltedCorrectnessData <- melt(SimulatedCorrectnessData,
variable.name = "RespCorr",
id.vars = c ("Block", "SubCondition", "Condition", "Condition2", "Congruency", "CatVsItem" ))
names(MeltedCorrectnessData)[7] <- "Simulation"
names(MeltedCorrectnessData)[8] <- "RespCorr"
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(~ Simulation, ncol = 2) +
theme(strip.text.x = element_text(size = 8, colour = "black"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Simulation ~ Condition, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
View(MeltedCorrectnessData)
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Simulation ~ Condition2, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Simulation ~ Condition2, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Simulation ~ Condition, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Simulation ~ Condition2, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(~ Simulation + Condition2, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(~ Condition2 + Simulation, ncol = 6) +
theme(strip.text.x = element_text(size = 4, colour = "black"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(~ Condition2 + Simulation, ncol = 6) +
theme(strip.text.x = element_text(size = 1, colour = "black"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(~ Condition2 + Simulation, ncol = 6)
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Condition2 ~ Simulation, ncol = 6) +
theme(strip.text.x = element_text(size = 1, colour = "black"))
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Condition2 ~ Simulation, ncol = 6) +
theme(strip.text.x = element_text(size = 1, colour = "black"))
theme(strip.text.y = element_text(size = 1, colour = "black"))
MeltedCorrectnessData$Condition2 <- factor(MeltedCorrectnessData$Condition,
level = c("1", "2", "3A", "3B", "4", "5", "6A", "6B", "7", "8", "9", "10"),
labels = c("Category Congruent", "Category Incongruent", "Category Conventional 1", "Category Conventional 2",
"Item Congruent", "Item Incongruent", "Item Conventional 1", "Item Conventional 2",
"Arbitrary Half-Half 1", "Arbitrary Half-Half 2", "Arbitrary- Fully", "No Label"))
png(file="name_of_img_save.png",width=3300 ,height=2000,res=150)
ggplot(MeltedCorrectnessData, aes(x= Block, y= RespCorr, colour= Congruency)) +
geom_point(aes(shape = CatVsItem), alpha = 0.4, size = 0.4) +
geom_smooth(aes(colour = Congruency, linetype = CatVsItem),size = 0.8, alpha = 0.4, se = F, method= 'loess', formula =  y~x)+
ggtitle("Simulated Proportion Correctby Condition") +
labs(x="Block", y="Proportion Correct") +
coord_cartesian(ylim = c(0, 1)) +
theme(axis.title.y = element_text(size=12,  color="#666666")) +
theme(axis.text = element_text(size=8)) +
theme(plot.title = element_text(size=16, face="bold", hjust=0, color="#666666")) +
facet_wrap(Condition2 ~ Simulation, ncol = 6) +
theme(strip.text.x = element_text(size = 1, colour = "black"))
theme(strip.text.y = element_text(size = 1, colour = "black"))
dev.off()
SonorantCons <- c('m', 'n', 'l')
PlosiveCons <- c('p', 't', 'k')
Conv1Cons <- c('f', 'v', 'sh')
Conv2Cons <- c('s', 'z', 'h')
Vowels <- c("a", 'a:')
## Next we assemble them into Syllables
PlosiveSyll1 <- as.vector(outer(PlosiveCons[c(1,2)], Vowels, paste, sep=""))
PlosiveSyll2 <- as.vector(outer(PlosiveCons[c(1,3)], Vowels, paste, sep=""))
PlosiveSyll3 <- as.vector(outer(PlosiveCons[c(2,3)], Vowels[1], paste, sep=""))
SonorantSyll1 <- as.vector(outer(SonorantCons[c(1,2)], Vowels, paste, sep=""))
SonorantSyll2 <- as.vector(outer(SonorantCons[c(1,3)], Vowels, paste, sep=""))
SonorantSyll3 <- as.vector(outer(SonorantCons[c(2,3)], Vowels[1], paste, sep=""))
Conv1Syll1 <- as.vector(outer(Conv1Cons[c(1,2)], Vowels, paste, sep=""))
Conv1Syll2 <- as.vector(outer(Conv1Cons[c(1,3)], Vowels, paste, sep=""))
Conv1Syll3 <- as.vector(outer(Conv1Cons[c(2,3)], Vowels[1], paste, sep=""))
Conv2Syll1 <- as.vector(outer(Conv2Cons[c(1,2)], Vowels, paste, sep=""))
Conv2Syll2 <- as.vector(outer(Conv2Cons[c(1,3)], Vowels, paste, sep=""))
Conv2Syll3 <- as.vector(outer(Conv2Cons[c(2,3)], Vowels[1], paste, sep=""))
PSyll1 <- c("pa", "pa:", "ta", "ta:")
PSyll2 <- c('pa', 'pa:', 'ka', 'ka:')
PSyll3 <- c('ta', 'ka')
SSyll1 <- c("ma", "ma:", "na", "na:")
SSyll2 <- c('ma', 'ma:', 'la', 'la:')
SSyll3 <- c('na', 'la')
C1Syll1 <- c("fa", "fa:", "va", "va:")
C1Syll2 <- c('fa', 'fa:', 'sha', 'sha:')
C1Syll3 <- c('va', 'sha')
C2Syll1 <- c("sa", "sa:", "za", "za:")
C2Syll2 <- c('sa', 'sa:', 'ha', 'ha:')
C2Syll3 <- c('za', 'ha')
outer(Psyll1, PSyll2)
outer(PSyll1, PSyll2)
PWS1 <- rp(PSyll1, each = 4)
PWS1 <- rep(PSyll1, each = 4)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- cbind(PWS1, PWS2)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
View(PBiSyll)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$PWS1, SBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$PWS1, SBiSyll$PWS2, sep = '')
View(SBiSyll)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
View(C1BiSyll)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
View(C1BiSyll)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
colnames(PBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(SBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C1BiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C2BiSyll) <- c ("Syll1", "Syll2", "Word")
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
View(BiSylls)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
colnames(PBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(SBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C1BiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C2BiSyll) <- c ("Syll1", "Syll2", "Word")
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
rm(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
colnames(PBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(SBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C1BiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C2BiSyll) <- c ("Syll1", "Syll2", "Word")
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
rm(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
BiSylls$Command <- paste("sox ", BiSylls$Syll1, ".wav ", BiSylls$Syll2, ".wav ", BiSylls$Word, ".wav", sep = '')
View(BiSylls)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
colnames(PBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(SBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C1BiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C2BiSyll) <- c ("Syll1", "Syll2", "Word")
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
rm(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
BiSylls$Command <- paste("sox ", BiSylls$Syll1, ".wav ", BiSylls$Syll2, ".wav ", BiSylls$Word, ".wav", sep = '')
write.csv(BiSylls$Command, "F:/GitHub Repos/Stekic-et-al/Sounds/BiSyllBash.csv")
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
colnames(PBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(SBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C1BiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C2BiSyll) <- c ("Syll1", "Syll2", "Word")
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
rm(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
BiSylls$Command <- paste("sox ", BiSylls$Syll1, ".wav ", BiSylls$Syll2, ".wav ", BiSylls$Word, ".wav", sep = '')
write.csv(BiSylls$Command, "F:/GitHub Repos/Stekic-et-al/Sounds/BiSyllBash.csv", row.names = FALSE)
PWS1 <- rep(PSyll1, each = 4)
PWS2 <- rep (PSyll2, 4)
PBiSyll <- as.data.frame(cbind(PWS1, PWS2))
PBiSyll$Word <- paste(PBiSyll$PWS1, PBiSyll$PWS2, sep = '')
SWS1 <- rep(SSyll1, each = 4)
SWS2 <- rep (SSyll2, 4)
SBiSyll <- as.data.frame(cbind(SWS1, SWS2))
SBiSyll$Word <- paste(SBiSyll$SWS1, SBiSyll$SWS2, sep = '')
C1WS1 <- rep(C1Syll1, each = 4)
C1WS2 <- rep (C1Syll2, 4)
C1BiSyll <- as.data.frame(cbind(C1WS1, C1WS2))
C1BiSyll$Word <- paste(C1BiSyll$C1WS1, C1BiSyll$C1WS2, sep = '')
C2WS1 <- rep(C2Syll1, each = 4)
C2WS2 <- rep (C2Syll2, 4)
C2BiSyll <- as.data.frame(cbind(C2WS1, C2WS2))
C2BiSyll$Word <- paste(C2BiSyll$C2WS1, C2BiSyll$C2WS2, sep = '')
rm(C1WS1, C1WS2, C2WS1, C2WS2, PWS1, PWS2, SWS1, SWS2)
colnames(PBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(SBiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C1BiSyll) <- c ("Syll1", "Syll2", "Word")
colnames(C2BiSyll) <- c ("Syll1", "Syll2", "Word")
BiSylls <- rbind(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
rm(PBiSyll, SBiSyll, C1BiSyll, C2BiSyll)
BiSylls$Command <- paste("sox ", BiSylls$Syll1, ".wav ", BiSylls$Syll2, ".wav ", BiSylls$Word, ".wav", sep = '')
write.csv(BiSylls$Command, "F:/GitHub Repos/Stekic-et-al/Sounds/BiSyllBash.csv", row.names = FALSE, header = FALSE)
View(BiSylls)
TriSylls$Syll12 <- BiSylls$Word
TriSylls <- BiSylls$Word
TriSylls <- rep(BiSylls$Word, each = 4)
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 4))
View(TriSylls)
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 4))
colnames(TriSylls) <- Syll12
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 4))
colnames(TriSylls) <- "Syll12"
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
Syll3 <- c(rep(PSyll3, 64), rep(SSyll3, 64), rep(C1Syll3, 64), rep(C2Syll3, 64))
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
Syll3 <- c(rep(PSyll3, 32), rep(SSyll3, 32), rep(C1Syll3, 32), rep(C2Syll3, 32))
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
Syll3 <- c(rep(PSyll3, 16), rep(SSyll3, 16), rep(C1Syll3, 16), rep(C2Syll3, 16))
TriSylls$Syll3 <- c(rep(PSyll3, 16), rep(SSyll3, 16), rep(C1Syll3, 16), rep(C2Syll3, 16))
View(TriSylls)
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
TriSylls$Syll3 <- c(rep(PSyll3, 16), rep(SSyll3, 16), rep(C1Syll3, 16), rep(C2Syll3, 16))
TriSylls$Word <- paste(TriSylls$Syll12, TriSylls$Syll3, sep = '')
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
TriSylls$Syll3 <- c(rep(PSyll3, 16), rep(SSyll3, 16), rep(C1Syll3, 16), rep(C2Syll3, 16))
TriSylls$Word <- paste(TriSylls$Syll12, TriSylls$Syll3, sep = '')
TriSylls$Command <- paste("sox ", TriSylls$Syll12, ".wav ", TriSylls$Syll3, ".wav ", TriSylls$Word, ".wav", sep = '')
TriSylls <- as.data.frame(rep(BiSylls$Word, each = 2))
colnames(TriSylls) <- "Syll12"
TriSylls$Syll3 <- c(rep(PSyll3, 16), rep(SSyll3, 16), rep(C1Syll3, 16), rep(C2Syll3, 16))
TriSylls$Word <- paste(TriSylls$Syll12, TriSylls$Syll3, sep = '')
TriSylls$Command <- paste("sox ", TriSylls$Syll12, ".wav ", TriSylls$Syll3, ".wav ", TriSylls$Word, ".wav", sep = '')
write.csv(TriSylls$Command, "F:/GitHub Repos/Stekic-et-al/Sounds/TriSyllBash.csv", row.names = FALSE)
